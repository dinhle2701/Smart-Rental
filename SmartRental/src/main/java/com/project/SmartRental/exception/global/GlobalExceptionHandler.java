package com.project.SmartRental.exception.global;

import java.time.LocalDateTime;

import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.servlet.NoHandlerFoundException;

import com.project.SmartRental.exception.custom.AccessDeniedException;
import com.project.SmartRental.exception.custom.ResourceNotFoundException;
import com.project.SmartRental.exception.response.ExceptionResponse;

import jakarta.servlet.http.HttpServletRequest;

@ControllerAdvice
public class GlobalExceptionHandler {

    // üî∏ 1. L·ªói ph√¢n quy·ªÅn
    @ExceptionHandler(AccessDeniedException.class)
    public ResponseEntity<ExceptionResponse> handleAccessDenied(AccessDeniedException ex) {
        ExceptionResponse response = new ExceptionResponse(ex);
        return new ResponseEntity<>(response, HttpStatus.UNAUTHORIZED);
    }

    // üî∏ 2. L·ªói t√†i nguy√™n kh√¥ng t√¨m th·∫•y (t·ª± custom)
    @ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<ExceptionResponse> handleResourceNotFound(ResourceNotFoundException ex) {
        ExceptionResponse response = new ExceptionResponse(ex);
        return new ResponseEntity<>(response, HttpStatus.NOT_FOUND);
    }

    // üî∏ 3. L·ªói vi ph·∫°m r√†ng bu·ªôc (VD: tr√πng kh√≥a, unique constraint)
    @ExceptionHandler(DataIntegrityViolationException.class)
    public ResponseEntity<ExceptionResponse> handleDataIntegrity(DataIntegrityViolationException ex, HttpServletRequest request) {
        ExceptionResponse response = new ExceptionResponse();
        response.setTimestamp(LocalDateTime.now());
        response.setCode(HttpStatus.CONFLICT.value());
        response.setMessage("D·ªØ li·ªáu b·ªã tr√πng ho·∫∑c vi ph·∫°m r√†ng bu·ªôc");
        response.setPath(request.getRequestURI());
        return new ResponseEntity<>(response, HttpStatus.CONFLICT);
    }

    // üî∏ 4. L·ªói kh√¥ng t√¨m th·∫•y endpoint (ƒë∆∞·ªùng d·∫´n sai)
    @ExceptionHandler(NoHandlerFoundException.class)
    public ResponseEntity<ExceptionResponse> handleNotFound(NoHandlerFoundException ex, HttpServletRequest request) {
        ExceptionResponse response = new ExceptionResponse();
        response.setTimestamp(LocalDateTime.now());
        response.setCode(HttpStatus.NOT_FOUND.value());
        response.setMessage("Kh√¥ng t√¨m th·∫•y endpoint: " + request.getRequestURI());
        response.setPath(request.getRequestURI());
        return new ResponseEntity<>(response, HttpStatus.NOT_FOUND);
    }

    // üî∏ 5. L·ªói validation (nh·∫≠p sai ƒë·ªãnh d·∫°ng, thi·∫øu tr∆∞·ªùng...)
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<ExceptionResponse> handleValidation(MethodArgumentNotValidException ex, HttpServletRequest request) {
        String message = ex.getBindingResult().getFieldError() != null
                ? ex.getBindingResult().getFieldError().getDefaultMessage()
                : "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá";
        ExceptionResponse response = new ExceptionResponse();
        response.setTimestamp(LocalDateTime.now());
        response.setCode(HttpStatus.BAD_REQUEST.value());
        response.setMessage(message);
        response.setPath(request.getRequestURI());
        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
    }

    // üî∏ 6. L·ªói chung (b·∫Øt m·ªçi exception c√≤n l·∫°i)
    @ExceptionHandler(Exception.class)
    public ResponseEntity<ExceptionResponse> handleGeneral(Exception ex, HttpServletRequest request) {
        ExceptionResponse response = new ExceptionResponse();
        response.setTimestamp(LocalDateTime.now());
        response.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());
        response.setMessage(ex.getMessage());
        response.setPath(request.getRequestURI());
        return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
    }
}
